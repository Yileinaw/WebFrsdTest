// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  username           String   @unique
  name               String?
  password           String
  role               String   @default("user") // Add role field, default to user
  avatarUrl          String? // 可选，用于存储头像路径
  bio                String?  // 添加个人简介字段
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  isEmailVerified    Boolean  @default(false) // <-- 添加邮箱验证状态
  emailVerificationToken String? @unique // 假设已有邮箱验证Token
  posts              Post[]   // 用户发布的所有帖子
  comments           Comment[] // 用户的所有评论
  likes              Like[]    // 用户收到的赞 (来自 Like 模型)
  likedPosts         Post[]    @relation("PostLikes") // 新增：用户点赞的帖子
  collections        Post[]    @relation("Collections")
  notifications      Notification[] @relation("RecipientNotifications") // 假设已有通知
  sentNotifications  Notification[] @relation("SenderNotifications") // 假设已有通知
  favorites          Favorite[] // 用户的收藏
  passwordResetCodes PasswordResetCode[] // <-- 添加反向关联
  emailVerificationCodes EmailVerificationCode[] // <-- 添加反向关联
  // 新增关注关系
  followers          Follows[] @relation("Following") // 关注我的人 (我是被关注者)
  following          Follows[] @relation("Follower")  // 我关注的人 (我是关注者)
  // 新增评论点赞关系 (为后续评论区优化准备)
  likedComments      Comment[] @relation("CommentLikes")
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String?    // Made content optional for consistency
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  comments    Comment[]  // 帖子的所有评论
  likes       Like[]     // 帖子收到的赞
  imageUrl    String?    @unique // Correctly add @unique to the existing field
  // 移除 tags 关系，稍后添加 PostTag 关系
  favoritedBy Favorite[] // 帖子被哪些用户收藏
  notifications Notification[] // Added inverse relation for Notification.post
  isShowcase  Boolean    @default(false)
  likedBy     User[]     @relation("PostLikes")
  collectedBy User[]     @relation("Collections")
  viewCount   Int        @default(0)

  @@index([authorId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@unique([postId, userId]) // 一个用户只能对一个帖子点赞一次
}

model Comment {
  id          Int       @id @default(autoincrement())
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  notification Notification?

  // Add parent/reply relation
  parentId    Int?      // 指向父评论的 ID，根评论则为 null
  parent      Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // 避免循环级联删除问题
  replies     Comment[] @relation("Replies") // 该评论下的所有回复

  // 评论点赞 (多对多关系) - 注意与User模型中的 likedComments 对应
  likedBy     User[]    @relation("CommentLikes")

  @@index([postId, createdAt])
  @@index([parentId])
  @@index([authorId]) // 添加索引
}

model Notification {
  id           Int       @id @default(autoincrement())
  type         String    // e.g., 'LIKE', 'COMMENT', 'FAVORITE'
  isRead       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  recipient    User      @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId  Int       // 通知接收者 (通常是帖子作者)
  sender       User?     @relation("SenderNotifications", fields: [senderId], references: [id], onDelete: SetNull)
  senderId     Int?      // 触发通知的用户 (点赞者、评论者、收藏者)
  postId       Int?      // 关联的帖子ID (可选)
  post         Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId    Int?      @unique // 关联的评论ID (仅用于评论通知) - Added @unique for one-to-one
  comment      Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  message      String?   // Pre-generated message if needed

  @@index([recipientId]) // Index for querying user's notifications
  @@index([postId])      // Index for notifications related to a post
}

// 保留原始 Tag 模型，但不再使用
model Tag {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  isFixed       Boolean        @default(false)
  // 移除关系
}

// 新增 PostTag 模型
model PostTag {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  isFixed       Boolean        @default(false)
  posts         Post[]         @relation("PostTags")
}

// 新增 FoodTag 模型
model FoodTag {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  isFixed       Boolean        @default(false)
  foodShowcases FoodShowcase[] @relation("FoodShowcaseTags")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // 确保用户对同一帖子的收藏是唯一的
}

// 新增：用于纯粹展示美食图片，与帖子系统分离
model FoodShowcase {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  title       String?
  description String?
  createdAt   DateTime @default(now())
  // 移除 tags 关系，稍后添加 FoodTag 关系
  tags        FoodTag[] @relation("FoodShowcaseTags") // 更新为使用FoodTag

  @@index([createdAt])
  @@index([title])
  @@index([description])
}

// 新增：用于存储密码重置验证码
model PasswordResetCode {
  id        Int      @id @default(autoincrement())
  code      String   // 验证码
  userId    Int      // 关联的用户ID
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime // 过期时间
  createdAt DateTime @default(now())

  @@unique([userId, code]) // 一个用户可能同时请求多个，但特定code应唯一
  @@index([userId])
  @@index([expiresAt]) // 用于快速查找过期记录
}

// 新增：用于存储邮箱验证码
model EmailVerificationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique // 验证码或Token，设为unique
  userId    Int      // 关联的用户ID
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime // 过期时间
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

// 新增 Follows 模型
model Follows {
  followerId     Int     // 关注者 ID
  followingId    Int     // 被关注者 ID
  createdAt      DateTime @default(now())

  follower         User    @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade) // 添加 onDelete
  following        User    @relation("Following", fields: [followingId], references: [id], onDelete: Cascade) // 添加 onDelete

  @@id([followerId, followingId]) // 联合主键
  @@index([followerId])
  @@index([followingId])
}
