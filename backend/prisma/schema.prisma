generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @default(autoincrement())
  email                  String                  @unique
  password               String
  name                   String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  avatarUrl              String?
  role                   String                  @default("user")
  isEmailVerified        Boolean                 @default(false)
  bio                    String?
  emailVerificationToken String?                 @unique
  username               String                  @unique
  comments               Comment[]
  emailVerificationCodes EmailVerificationCode[]
  favorites              Favorite[]
  following              Follows[]               @relation("Follower")
  followers              Follows[]               @relation("Following")
  likes                  Like[]
  notifications          Notification[]          @relation("RecipientNotifications")
  sentNotifications      Notification[]          @relation("SenderNotifications")
  passwordResetCodes     PasswordResetCode[]
  posts                  Post[]
  collections            Post[]                  @relation("Collections")
  likedComments          Comment[]               @relation("CommentLikes")
  likedPosts             Post[]                  @relation("PostLikes")
}

model Post {
  id            Int            @id @default(autoincrement())
  title         String
  content       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      Int
  imageUrl      String?        @unique
  isShowcase    Boolean        @default(false)
  viewCount     Int            @default(0)
  comments      Comment[]
  favoritedBy   Favorite[]
  likes         Like[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  PostTags      PostTags[]
  collectedBy   User[]         @relation("Collections")
  likedBy       User[]         @relation("PostLikes")

  @@index([authorId])
}

model Like {
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id           Int           @id @default(autoincrement())
  text         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  authorId     Int
  postId       Int
  parentId     Int?
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent       Comment?      @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Comment[]     @relation("Replies")
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notification Notification?
  likedBy      User[]        @relation("CommentLikes")

  @@index([postId, createdAt])
  @@index([parentId])
  @@index([authorId])
}

model Notification {
  id          Int      @id @default(autoincrement())
  recipientId Int
  postId      Int?
  commentId   Int?     @unique
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  message     String?
  senderId    Int?
  type        String
  comment     Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  recipient   User     @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User?    @relation("SenderNotifications", fields: [senderId], references: [id])

  @@index([recipientId])
  @@index([postId])
}

model PostTag {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  isFixed Boolean @default(false)
}

model FoodTag {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  isFixed Boolean @default(false)
}

model Favorite {
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model FoodShowcase {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  title       String?
  description String?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([title])
  @@index([description])
}

model PasswordResetCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
  @@index([userId])
  @@index([expiresAt])
}

model EmailVerificationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Follows {
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model FoodShowcaseTags {
  A Int
  B Int

  @@unique([A, B], map: "_FoodShowcaseTags_AB_unique")
  @@index([B], map: "_FoodShowcaseTags_B_index")
  @@map("_FoodShowcaseTags")
}

model PostTags {
  A    Int
  B    Int
  Post Post @relation(fields: [A], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_PostTags_AB_unique")
  @@index([B], map: "_PostTags_B_index")
  @@map("_PostTags")
}
