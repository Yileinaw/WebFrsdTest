// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  favorites Favorite[]
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications     Notification[] @relation("SentNotifications")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  likedBy   Like[]
  likesCount Int @default(0)
  comments   Comment[]
  commentsCount Int @default(0)
  favoritedBy Favorite[]
  favoritesCount Int @default(0)
  notifications   Notification[]
}

model Like {
  userId Int
  postId Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  notification Notification?

  parentId  Int?      // Optional ID of the parent comment
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies") // List of replies to this comment
}

model Favorite {
  userId Int
  postId Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

enum NotificationType {
  LIKE
  COMMENT
  FAVORITE
  REPLY
}

model Notification {
  id          Int              @id @default(autoincrement())
  recipient   User             @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int
  actor       User             @relation("SentNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  actorId     Int
  type        NotificationType
  post        Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  comment     Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   Int?             @unique
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@index([recipientId, createdAt])
}
