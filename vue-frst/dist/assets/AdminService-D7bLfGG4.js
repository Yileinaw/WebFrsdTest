import{ah as t,A as i}from"./index-B8L1PXQk.js";const g={async getFoodShowcases(r={}){try{const{page:o=1,limit:e=10,includeTags:s=!0,search:n,tags:a}=r,c=new URLSearchParams;return c.append("page",String(o)),c.append("limit",String(e)),s&&c.append("includeTags","true"),n&&c.append("search",n),a&&a.length>0&&c.append("tags",a),(await t.get(`/food-showcase?${c.toString()}`)).data}catch{throw new Error("获取美食展示列表失败")}},async createFoodShowcase(r){var o,e;try{return(await t.post("/food-showcase",r,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(s){throw console.error("[AdminService] Error creating food showcase:",s),new Error(((e=(o=s.response)==null?void 0:o.data)==null?void 0:e.message)||"创建美食展示失败")}},async updateFoodShowcase(r,o){var e,s;try{return(await t.put(`/food-showcase/${r}`,o,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(n){throw console.error(`[AdminService] Error updating food showcase ${r}:`,n),new Error(((s=(e=n.response)==null?void 0:e.data)==null?void 0:s.message)||"更新美食展示失败")}},async deleteFoodShowcase(r){var o,e;try{return(await t.delete(`/food-showcase/${r}`)).data}catch(s){throw console.error(`[AdminService] Error deleting food showcase ${r}:`,s),new Error(((e=(o=s.response)==null?void 0:o.data)==null?void 0:e.message)||"删除美食展示失败")}},async bulkDeleteFoodShowcases(r){var o,e;try{return(await t.post("/food-showcase/bulk-delete",{ids:r})).data}catch(s){throw console.error("[AdminService] Error bulk deleting food showcases:",s),new Error(((e=(o=s.response)==null?void 0:o.data)==null?void 0:e.message)||"批量删除美食展示失败")}},async getAllTags(r="food"){console.warn("[AdminService] getAllTags方法已弃用，请使用PostTagService或FoodTagService");const o=r==="post"?"/post-tags":"/food-tags";try{return(await t.get(o)).data}catch(e){throw console.error("[AdminService] 标签列表获取失败:",e),new Error("获取标签列表失败")}},async updateTag(r,o){var e;console.warn("[AdminService] updateTag方法已弃用，请使用PostTagService或FoodTagService");try{console.log(`[AdminService] 发送标签更新请求 ID: ${r}, 新名称: ${o.name}`);const s=await t.put(`/food-tags/${r}`,o);return console.log("[AdminService] 标签更新成功:",s.data),s.data}catch(s){throw console.error(`[AdminService] 标签更新失败 ID: ${r}:`,s.response||s),((e=s.response)==null?void 0:e.status)===401?new Error("认证失败，请重新登录后再试"):s}},async deleteTag(r){var o;console.warn("[AdminService] deleteTag方法已弃用，请使用PostTagService或FoodTagService");try{console.log(`[AdminService] 发送标签删除请求 ID: ${r}`);const e=await t.delete(`/food-tags/${r}`);return console.log("[AdminService] 标签删除成功:",e.data),e.data}catch(e){throw console.error(`[AdminService] 标签删除失败 ID: ${r}:`,e.response||e),((o=e.response)==null?void 0:o.status)===401?new Error("认证失败，请重新登录后再试"):e}},async createTag(r,o="food"){var s,n;console.warn("[AdminService] createTag方法已弃用，请使用PostTagService或FoodTagService");const e=o==="post"?"/post-tags":"/food-tags";try{return(await t.post(e,{name:r})).data}catch(a){throw console.error("[AdminService] 创建标签失败:",a),new Error(((n=(s=a.response)==null?void 0:s.data)==null?void 0:n.message)||"创建标签失败")}},async getShowcaseStats(){var r,o;try{return(await t.get("/food-showcase/stats")).data}catch(e){throw console.error("[AdminService] 获取美食展示统计失败:",e),new Error(((o=(r=e.response)==null?void 0:r.data)==null?void 0:o.message)||"获取统计信息失败")}},async checkAdminRole(){var r,o,e;try{return(await t.get("/admin/check-role")).data}catch(s){if(console.error("[AdminService] 检查管理员角色失败:",s),((r=s.response)==null?void 0:r.status)===403)return{userId:0,role:"user",isAdmin:!1,isModerator:!1,hasAdminAccess:!1};throw new Error(((e=(o=s.response)==null?void 0:o.data)==null?void 0:e.message)||"检查权限失败")}},async makeUserAdmin(r){throw new Error("This function is only available in development mode.")},async getDashboardStats(){var r,o;console.log("[AdminService] Fetching dashboard stats...");try{const e=await t.get("/admin/dashboard/stats");return console.log("[AdminService] Dashboard stats fetched:",e.data),e.data}catch(e){console.error("[AdminService] 获取仪表盘统计失败:",e);const s=((o=(r=e.response)==null?void 0:r.data)==null?void 0:o.message)||"获取仪表盘统计数据失败，请稍后重试。";throw new Error(s)}},async getPosts(r={}){try{const o=new URLSearchParams;return r.page&&o.append("page",String(r.page)),r.limit&&o.append("limit",String(r.limit)),r.search&&o.append("search",r.search),r.status&&o.append("status",r.status),(await t.get(`/admin/posts?${o.toString()}`)).data}catch(o){throw console.error("[AdminService] 获取帖子列表失败:",o.response||o),i.error("获取帖子列表失败"),new Error("获取帖子列表失败")}},async deletePost(r){var o,e;try{const s=await t.delete(`/admin/posts/${r}`);return i.success(s.data.message||"帖子删除成功"),s.data}catch(s){throw console.error(`[AdminService] 删除帖子 ${r} 失败:`,s.response||s),i.error(((e=(o=s.response)==null?void 0:o.data)==null?void 0:e.message)||"删除帖子失败"),new Error("删除帖子失败")}},async getUsers(r={}){const{page:o=1,limit:e=10,search:s,role:n}=r,a=new URLSearchParams;a.append("page",String(o)),a.append("limit",String(e)),s&&a.append("search",s),n&&a.append("role",n);try{console.log(`[AdminService] Fetching users with params: ${a.toString()}`);const c=await t.get(`/admin/users?${a.toString()}`);return console.log("[AdminService] Raw response data from backend:",c.data),c.data}catch(c){return console.error("[AdminService] Failed to fetch users:",c.response||c),i.error("获取用户列表失败，请检查网络或联系管理员"),{users:[],total:0}}},async getSystemInfo(){var r,o;try{console.log("[AdminService] Fetching system info...");const e=await t.get("/admin/system-info");return console.log("[AdminService] System info fetched:",e.data),e.data}catch(e){console.error("[AdminService] 获取系统信息失败:",e.response||e);const s=((o=(r=e.response)==null?void 0:r.data)==null?void 0:o.message)||"获取系统信息失败，请稍后重试。";throw i.error(s),new Error(s)}}};export{g as A};
