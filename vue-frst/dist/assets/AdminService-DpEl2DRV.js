import{as as t,Z as i}from"./index-u3ChIZEC.js";const p={async getFoodShowcases(o={}){const{page:r=1,limit:e=10,includeTags:s=!0,search:c,tags:a}=o,n=new URLSearchParams;return n.append("page",String(r)),n.append("limit",String(e)),s&&n.append("includeTags","true"),c&&n.append("search",c),a&&a.length>0&&n.append("tags",a.join("|")),(await t.get(`/food-showcase?${n.toString()}`)).data},async createFoodShowcase(o){var r;try{console.log("[AdminService] 发送美食图片上传请求");const e=await t.post("/food-showcase",o,{headers:{"Content-Type":"multipart/form-data"}});return console.log("[AdminService] 美食图片上传成功:",e.data),e.data}catch(e){throw console.error("[AdminService] 美食图片上传失败:",e.response||e),((r=e.response)==null?void 0:r.status)===401?new Error("认证失败，请重新登录后再试"):e}},async updateFoodShowcase(o,r){var e;try{console.log(`[AdminService] 发送美食图片更新请求 ID: ${o}`);const s=await t.put(`/food-showcase/${o}`,r,{headers:{"Content-Type":"multipart/form-data"}});return console.log("[AdminService] 美食图片更新成功:",s.data),s.data}catch(s){throw console.error(`[AdminService] 美食图片更新失败 ID: ${o}:`,s.response||s),((e=s.response)==null?void 0:e.status)===401?new Error("认证失败，请重新登录后再试"):s}},async deleteFoodShowcase(o){var r;try{console.log(`[AdminService] 发送美食图片删除请求 ID: ${o}`);const e=await t.delete(`/food-showcase/${o}`);return console.log("[AdminService] 美食图片删除成功:",e.data),e.data}catch(e){throw console.error(`[AdminService] 美食图片删除失败 ID: ${o}:`,e.response||e),((r=e.response)==null?void 0:r.status)===401?new Error("认证失败，请重新登录后再试"):e}},async deleteFoodShowcasesBulk(o){var r;try{console.log(`[AdminService] 发送美食图片批量删除请求 IDs: ${o.join(", ")}`);const e=await t.post("/food-showcase/bulk-delete",{ids:o});return console.log("[AdminService] 美食图片批量删除成功:",e.data),e.data}catch(e){throw console.error("[AdminService] 美食图片批量删除失败:",e.response||e),((r=e.response)==null?void 0:r.status)===401?new Error("认证失败，请重新登录后再试"):e}},async getAllTags(){var o;try{console.log("[AdminService] 获取标签列表");const r=await t.get("/tags");return console.log("[AdminService] 标签列表获取成功:",r.data),r.data}catch(r){return console.error("[AdminService] 标签列表获取失败:",r.response||r),((o=r.response)==null?void 0:o.status)!==401&&i.error("获取标签列表失败"),[]}},async updateTag(o,r){var e;try{console.log(`[AdminService] 发送标签更新请求 ID: ${o}, 新名称: ${r.name}`);const s=await t.put(`/tags/${o}`,r);return console.log("[AdminService] 标签更新成功:",s.data),s.data}catch(s){throw console.error(`[AdminService] 标签更新失败 ID: ${o}:`,s.response||s),((e=s.response)==null?void 0:e.status)===401?new Error("认证失败，请重新登录后再试"):s}},async deleteTag(o){var r;try{console.log(`[AdminService] 发送标签删除请求 ID: ${o}`);const e=await t.delete(`/tags/${o}`);return console.log("[AdminService] 标签删除成功:",e.data),e.data}catch(e){throw console.error(`[AdminService] 标签删除失败 ID: ${o}:`,e.response||e),((r=e.response)==null?void 0:r.status)===401?new Error("认证失败，请重新登录后再试"):e}},async createTag(o){var r;try{console.log(`[AdminService] 发送标签创建请求，名称: ${o.name}`);const e=await t.post("/tags",o);return console.log("[AdminService] 标签创建成功:",e.data),e.data}catch(e){throw console.error(`[AdminService] 标签创建失败，名称: ${o.name}:`,e.response||e),((r=e.response)==null?void 0:r.status)===401?new Error("认证失败，请重新登录后再试"):e}},async getShowcaseStats(){var o;try{console.log("[AdminService] 获取美食图片统计数据");const r=await t.get("/food-showcase/stats");return console.log("[AdminService] 统计数据获取成功:",r.data),r.data}catch(r){throw console.error("[AdminService] 统计数据获取失败:",r.response||r),((o=r.response)==null?void 0:o.status)===401?new Error("认证失败，请重新登录后再试"):new Error("获取统计数据失败")}},async getDashboardStats(){var o;try{console.log("[AdminService] 获取仪表盘统计数据");const r=await t.get("/admin/dashboard/stats");return console.log("[AdminService] 仪表盘统计数据获取成功:",r.data),r.data}catch(r){throw console.error("[AdminService] 仪表盘统计数据获取失败:",r.response||r),((o=r.response)==null?void 0:o.status)===401?new Error("认证失败，请重新登录后再试"):new Error("获取仪表盘统计数据失败")}}};export{p as A};
